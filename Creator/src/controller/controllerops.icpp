
/**
 * This file is part of Nokia OMAF implementation
 *
 * Copyright (c) 2018-2021 Nokia Corporation and/or its subsidiary(-ies). All rights reserved.
 *
 * Contact: omaf@nokia.com
 *
 * This software, including documentation, is protected by copyright controlled by Nokia Corporation and/ or its
 * subsidiaries. All rights are reserved.
 *
 * Copying, including reproducing, storing, adapting or translating, any or all of this material requires the prior
 * written consent of Nokia.
 */
#include "async/graphbase.h"
#include "common/utils.h"
#include "log/log.h"

namespace VDD
{
    template <typename Async>
    Async* ControllerOps::configureForGraph(std::unique_ptr<Async>&& async)
    {
        async->setLog(mLog->instance());
        if (mConfig.prefix)
        {
            async->setName("[" + *mConfig.prefix + "] " + async->getName());
        }
        return mGraph.giveOwnership(std::move(async));
    }

    template <typename SyncClass, typename Wrapper>
    Wrapper* ControllerOps::wrapForGraph(const std::string& aName, std::unique_ptr<SyncClass>&& aSyncNode)
    {
        return configureForGraph(Utils::make_unique<Wrapper>(mGraph, aName, std::move(aSyncNode)));
    }

    template <typename SyncClass, typename Wrapper, typename ClassConfig>
    Wrapper* ControllerOps::makeForGraph(const std::string& aName, const ClassConfig& aConfig)
    {
        auto syncNode = Utils::make_unique<SyncClass>(aConfig);
        return wrapForGraph<SyncClass, Wrapper>(aName, std::move(syncNode));
    }
}
